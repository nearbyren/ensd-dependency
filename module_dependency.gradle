import groovy.json.JsonSlurper

// 应用该文件的时候，执行该方法
includeAndSwitchModuleDep()

def includeAndSwitchModuleDep() {
    try {
        // module依赖的配置信息文件路径，json格式
        def moduleDepConfigDir = "module_dependency.json"
        // 解析json配置
        def json = file(moduleDepConfigDir).getText()
        def jsonSlurper = new JsonSlurper()
        def obj = jsonSlurper.parseText(json)
        def moduleDepList = []
        def useModuleAll = obj.useModuleAll
        println "afterEvaluate obj=$obj"
        //处理获取json指定模块引用的
        switch (dependency) {
            case "app":
                moduleDepList = obj.list.ensd_app
                moduleDepList.forEach {
                    println "afterEvaluate switch app = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_common":
                moduleDepList = obj.list.ensd_common
                moduleDepList.forEach {
                    println "afterEvaluate switch app = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_uikit":
                moduleDepList = obj.list.ensd_uikit
                moduleDepList.forEach {
                    println "afterEvaluate switch app = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_push":
                moduleDepList = obj.list.ensd_push
                moduleDepList.forEach {
                    println "afterEvaluate switch app = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_home":
                moduleDepList = obj.list.ensd_home
                moduleDepList.forEach {
                    println "afterEvaluate switch home = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_index":
                moduleDepList = obj.list.ensd_index
                moduleDepList.forEach {
                    println "afterEvaluate switch index = $it.module_name - $it.module_dir"
                }
                break
            case "order":
                moduleDepList = obj.list.ensd_order
                moduleDepList.forEach {
                    println "afterEvaluate switch order = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_me":
                moduleDepList = obj.list.ensd_me
                moduleDepList.forEach {
                    println "afterEvaluate switch me = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_advertise":
                moduleDepList = obj.list.ensd_advertise
                moduleDepList.forEach {
                    println "afterEvaluate switch advertise = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_station":
                moduleDepList = obj.list.ensd_station
                moduleDepList.forEach {
                    println "afterEvaluate switch station = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_pay":
                moduleDepList = obj.list.ensd_pay
                moduleDepList.forEach {
                    println "afterEvaluate switch pay = $it.module_name - $it.module_dir"
                }
                break
            case "ensd_coupon":
                moduleDepList = obj.list.ensd_coupon
                moduleDepList.forEach {
                    println "afterEvaluate switch coupon =$it.module_name - $it.mod¬ule_dir"
                }
                break
            case "ensd_login":
                moduleDepList = obj.list.ensd_login
                moduleDepList.forEach {
                    println "afterEvaluate switch login = $it.module_name - $it.module_dir"
                }
                break
        }
        // 遍历配置信息列表，找出 useModule==true 的模块，动态include
        if (useModuleAll) {
            moduleDepList.forEach {
                include ":${it.module_name}"
                project(":${it.module_name}").projectDir = file(it.module_dir)
            }
        } else {
            moduleDepList.forEach {
                if (it.useModule) {
                    include ":${it.module_name}"
                    project(":${it.module_name}").projectDir = file(it.module_dir)
                }
            }
        }
        // aar依赖 与 module依赖 动态切换
        switchToModuleDependency(useModuleAll, moduleDepList)
    } catch (Exception e) {
        e.printStackTrace()
    }
}
/**
 * 切换到 module 依赖
 * @param useModuleAll
 * @param moduleDepList
 * @return
 */
def switchToModuleDependency(boolean useModuleAll, List<Object> moduleDepList) {
    gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {

        @Override
        void beforeEvaluate(Project projectObj) {

        }

        @Override
        void afterEvaluate(Project projectObj, ProjectState state) {
            println "project name is $projectObj"
            println "afterEvaluate project.configurations=${projectObj.configurations}"
            if (projectObj.name != "app") {
                return
            }
            switchModuleDep(projectObj, useModuleAll, moduleDepList)
        }
    })
}
/**
 * aar依赖 与 module依赖 动态切换
 * @param projectObj project 对象
 * @param useModuleAll 所有依赖来自本地
 * @param moduleDepList module依赖配置信息列表
 * @return
 */
def switchModuleDep(Project projectObj, boolean useModuleAll, List<Object> moduleDepList) {
    // projectsEvaluated方法是所有module构建完成后执行的回调
    gradle.projectsEvaluated {
        gradle.rootProject.subprojects {
            println "switchToModuleDependency project name is $it"
            projectObj.configurations.all { Configuration ->
                resolutionStrategy {
                    dependencySubstitution {
                        if (useModuleAll) {
                            moduleDepList.forEach {
                                substitute module(it.module_group) with project(":${it.module_name}")
                            }
                        } else {
                            moduleDepList.forEach {
                                if (it.useModule) {
                                    substitute module(it.module_group) with project(":${it.module_name}")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
